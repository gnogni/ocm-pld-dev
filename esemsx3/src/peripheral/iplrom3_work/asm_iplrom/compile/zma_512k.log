Z80 Macro Assembler ZMA v1.0.15
=====================================================
Programmed by t.hara

<< code >>
[	ORG DRAM_CODE_ADDRESS]
	code address: 0x00f000

[BEGIN_OF_CODE :]
	label address: 0x00f000

[	DI] Z80:5cyc, R800:2cyc
00f000: f3

[	LD A , 0X40] Z80:8cyc, R800:2cyc
00f001: 3e 40

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f003: 32 00 60

[	LD A , [ MEGASD_STATUS_REGISTER ]] Z80:14cyc, R800:6cyc
00f006: 3a 00 58

[	RRCA] Z80:5cyc, R800:1cyc
00f009: 0f

[	JR NC , NOT_POWER_ON_RESET] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f00a: 30 03

[	LD [ BIOS_UPDATING ] , A] Z80:14cyc, R800:6cyc
00f00c: 32 0c f6

[NOT_POWER_ON_RESET :]
	label address: 0x00f00f

[SELF_COPY ::]
	global label address: 0x00f00f

[	LD SP , 0XFFFF] Z80:11cyc, R800:3cyc
00f00f: 31 ff ff

[	LD BC , END_OF_CODE - INIT_STACK] Z80:11cyc, R800:3cyc
00f012: 01 e4 05

[	LD DE , INIT_STACK] Z80:11cyc, R800:3cyc
00f015: 11 1f f0

[	LD HL , INIT_STACK - BEGIN_OF_CODE + 0X0000] Z80:11cyc, R800:3cyc
00f018: 21 1f 00

[	PUSH DE] Z80:12cyc, R800:6cyc
00f01b: d5

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00f01c: ed b0

[	RET] Z80:11cyc, R800:5cyc
00f01e: c9

[INIT_STACK ::]
	global label address: 0x00f01f

[	INCLUDE ".//../subroutine/ocm_iplrom_vdp.asm"] begin
[	SCOPE INIT_VDP]
	Scope path: INIT_VDP:

[INIT_VDP ::]
	global label address: 0x00f01f

[	LD HL , VDP_CONTROL_REGS] Z80:11cyc, R800:3cyc
00f01f: 21 a1 f4

[	LD BC , ( ( VDP_CONTROL_REGS_END - VDP_CONTROL_REGS ) << 8 ) | VDP_PORT1] Z80:11cyc, R800:3cyc
00f022: 01 99 12

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f025: ed b3

[	LD BC , ( ( VDP_MSX1_PALETTE_REGS_END - VDP_MSX1_PALETTE_REGS ) << 8 ) | VDP_PORT2] Z80:11cyc, R800:3cyc
00f027: 01 9a 20

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f02a: ed b3

[	DEC C] Z80:5cyc, R800:1cyc
00f02c: 0d

[	XOR A , A] Z80:5cyc, R800:1cyc
00f02d: af

[	LD D , 0X20] Z80:8cyc, R800:2cyc
00f02e: 16 20

[LOOP1 :]
	label address: 0x00f030

[	OUT [ VDP_PORT0 ] , A] Z80:12cyc, R800:10 or 9cyc
00f030: d3 98

[	DJNZ LOOP1] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f032: 10 fc

[	DEC D] Z80:5cyc, R800:1cyc
00f034: 15

[	JR NZ , LOOP1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f035: 20 f9

[	LD B , 32] Z80:8cyc, R800:2cyc
00f037: 06 20

[	LD A , 0XF1] Z80:8cyc, R800:2cyc
00f039: 3e f1

[LOOP2 :]
	label address: 0x00f03b

[	OUT [ VDP_PORT0 ] , A] Z80:12cyc, R800:10 or 9cyc
00f03b: d3 98

[	DJNZ LOOP2] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f03d: 10 fc

[	LD DE , 0X8140] Z80:11cyc, R800:3cyc
00f03f: 11 40 81

[	OUT [ C ] , E] Z80:14cyc, R800:10 or 9cyc
00f042: ed 59

[	OUT [ C ] , D] Z80:14cyc, R800:10 or 9cyc
00f044: ed 51

[	LD D , 1 * 8] Z80:8cyc, R800:2cyc
00f046: 16 08

[	OUT [ C ] , D] Z80:14cyc, R800:10 or 9cyc
00f048: ed 51

[	OUT [ C ] , E] Z80:14cyc, R800:10 or 9cyc
00f04a: ed 59

[	DEC C] Z80:5cyc, R800:1cyc
00f04c: 0d

[	LD B , ( ( ICON_PATTERN_END - ICON_PATTERN ) % 256 )] Z80:8cyc, R800:2cyc
00f04d: 06 00

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f04f: ed b3

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//../subroutine/ocm_iplrom_vdp.asm"] end

[INIT_SWITCH_IO ::]
	global label address: 0x00f051

[	LD A , EXP_IO_1CHIPMSX_ID] Z80:8cyc, R800:2cyc
00f051: 3e d4

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f053: d3 40

[	CALL SD_INITIALIZE] Z80:18cyc, R800:5cyc
00f055: cd 8c f3

[CHECK_ALREADY_LOADED ::]
	global label address: 0x00f058

[	LD A , [ BIOS_UPDATING ]] Z80:14cyc, R800:6cyc
00f058: 3a 0c f6

[	CP A , 0XD4] Z80:8cyc, R800:2cyc
00f05b: fe d4

[	LD A , DOS_ROM1_BANK] Z80:8cyc, R800:2cyc
00f05d: 3e 80

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f05f: 32 00 70

[	JR Z , FORCE_BIOS_LOAD_FROM_EPBIOS] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f062: 28 13

[	CALL AB_CHECK] Z80:18cyc, R800:5cyc
00f064: cd b1 f2

[	JR NZ , FORCE_BIOS_LOAD_FROM_SDCARD] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f067: 20 0b

[	LD A , OPT_ROM_BANK] Z80:8cyc, R800:2cyc
00f069: 3e 9e

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f06b: 32 00 70

[	CALL CBIOS_CHECK] Z80:18cyc, R800:5cyc
00f06e: cd be f2

[	JP BOOT_UP_BIOS] Z80:11cyc, R800:5cyc
00f071: c3 59 f2

[FORCE_BIOS_LOAD_FROM_SDCARD ::]
	global label address: 0x00f074

[	CALL LOAD_FROM_SDCARD] Z80:18cyc, R800:5cyc
00f074: cd b7 f0

[FORCE_BIOS_LOAD_FROM_EPBIOS ::]
	global label address: 0x00f077

[	CALL LOAD_FROM_EPCS] Z80:18cyc, R800:5cyc
00f077: cd b7 f1

[	LD A , ICON_ERROR] Z80:8cyc, R800:2cyc
00f07a: 3e 01

[STOP_WITH_ERROR ::]
	global label address: 0x00f07c

[	CALL VDP_PUT_ICON] Z80:18cyc, R800:5cyc
00f07c: cd ed f5

[	LD A , 0X35] Z80:8cyc, R800:2cyc
00f07f: 3e 35

[	OUT [ 0X41 ] , A] Z80:12cyc, R800:10 or 9cyc
00f081: d3 41

[	LD A , 0X1F] Z80:8cyc, R800:2cyc
00f083: 3e 1f

[	OUT [ 0X41 ] , A] Z80:12cyc, R800:10 or 9cyc
00f085: d3 41

[	LD A , 0X23] Z80:8cyc, R800:2cyc
00f087: 3e 23

[	OUT [ 0X41 ] , A] Z80:12cyc, R800:10 or 9cyc
00f089: d3 41

[	LD [ BIOS_UPDATING ] , A] Z80:14cyc, R800:6cyc
00f08b: 32 0c f6

[	HALT] Z80:5cyc, R800:2cyc and wait interrupt
00f08e: 76

[EPBIOS_IMAGE_TABLE ::]
	global label address: 0x00f08f

[SDBIOS_IMAGE_TABLE ::]
	global label address: 0x00f08f

[	DB 32]
00f08f: 20

[	DB 0XFF]
00f090: ff

[	INCLUDE ".//../subroutine/ocm_iplrom_serial_rom.asm"] begin
[	SCOPE READ_SECTOR_FROM_EPCS]
	Scope path: READ_SECTOR_FROM_EPCS:

[READ_SECTOR_FROM_EPCS ::]
	global label address: 0x00f091

[	PUSH DE] Z80:12cyc, R800:6cyc
00f091: d5

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f092: eb

[	ADD HL , HL] Z80:12cyc, R800:1cyc
00f093: 29

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f094: eb

[	XOR A , A] Z80:5cyc, R800:1cyc
00f095: af

[	LD C , B] Z80:5cyc, R800:2cyc
00f096: 48

[	LD B , A] Z80:5cyc, R800:2cyc
00f097: 47

[	PUSH BC] Z80:12cyc, R800:6cyc
00f098: c5

[	PUSH HL] Z80:12cyc, R800:6cyc
00f099: e5

[	LD HL , MEGASD_SD_REGISTER | ( 0 << 12 )] Z80:11cyc, R800:3cyc
00f09a: 21 00 40

[	LD [ HL ] , EPCS_READ_BYTES] Z80:11cyc, R800:5cyc
00f09d: 36 03

[	LD [ HL ] , D] Z80:8cyc, R800:4cyc
00f09f: 72

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f0a0: 73

[	LD [ HL ] , A] Z80:8cyc, R800:4cyc
00f0a1: 77

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f0a2: be

[	POP DE] Z80:11cyc, R800:5cyc
00f0a3: d1

[	LD A , C] Z80:5cyc, R800:2cyc
00f0a4: 79

[	LD C , B] Z80:5cyc, R800:2cyc
00f0a5: 48

[READ_ALL :]
	label address: 0x00f0a6

[	PUSH HL] Z80:12cyc, R800:6cyc
00f0a6: e5

[	LD B , 2] Z80:8cyc, R800:2cyc
00f0a7: 06 02

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00f0a9: ed b0

[	POP HL] Z80:11cyc, R800:5cyc
00f0ab: e1

[	DEC A] Z80:5cyc, R800:1cyc
00f0ac: 3d

[	JR NZ , READ_ALL] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0ad: 20 f7

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f0af: 3a 00 50

[	POP HL] Z80:11cyc, R800:5cyc
00f0b2: e1

[	POP DE] Z80:11cyc, R800:5cyc
00f0b3: d1

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f0b4: 19

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f0b5: eb

[	RET] Z80:11cyc, R800:5cyc
00f0b6: c9

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//../subroutine/ocm_iplrom_serial_rom.asm"] end

[	INCLUDE ".//../subroutine/ocm_iplrom_fat_driver.asm"] begin
[	SCOPE LOAD_FROM_SDCARD]
	Scope path: LOAD_FROM_SDCARD:

[LOAD_FROM_SDCARD ::]
	global label address: 0x00f0b7

[	LD A , ICON_SD_ANI + 2 * ( 1 - SD_ANI_ENABLER )] Z80:8cyc, R800:2cyc
00f0b7: 3e 1d

[	LD [ ANIMATION_ID + 2 ] , A] Z80:14cyc, R800:6cyc
00f0b9: 32 0f f6

[	LD A , ICON_SD_ANI + 2] Z80:8cyc, R800:2cyc
00f0bc: 3e 1f

[	LD [ ANIMATION_ID + 1 ] , A] Z80:14cyc, R800:6cyc
00f0be: 32 0e f6

[	LD A , ICON_SD_CARD] Z80:8cyc, R800:2cyc
00f0c1: 3e 0d

[	LD [ ANIMATION_ID ] , A] Z80:14cyc, R800:6cyc
00f0c3: 32 0d f6

[	CALL VDP_PUT_ICON] Z80:18cyc, R800:5cyc
00f0c6: cd ed f5

[SD_FIRST_PROCESS :]
	label address: 0x00f0c9

[	LD BC , 0X0100] Z80:11cyc, R800:3cyc
00f0c9: 01 00 01

[	LD D , C] Z80:5cyc, R800:2cyc
00f0cc: 51

[	LD E , C] Z80:5cyc, R800:2cyc
00f0cd: 59

[	LD HL , BUFFER] Z80:11cyc, R800:3cyc
00f0ce: 21 00 c0

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f0d1: cd 69 f4

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f0d4: d8

[SEARCH_ACTIVE_PARTITION_ON_MBR ::]
	global label address: 0x00f0d5

[	LD B , 4] Z80:8cyc, R800:2cyc
00f0d5: 06 04

[	LD HL , BUFFER + MBR_1ST_PARTITION + MBR_PARTITION_LBA_BEGIN_SECTOR] Z80:11cyc, R800:3cyc
00f0d7: 21 c6 c1

[TEST_PARTITION_LOOP :]
	label address: 0x00f0da

[	LD E , [ HL ]] Z80:8cyc, R800:4cyc
00f0da: 5e

[	INC HL] Z80:7cyc, R800:1cyc
00f0db: 23

[	LD D , [ HL ]] Z80:8cyc, R800:4cyc
00f0dc: 56

[	INC HL] Z80:7cyc, R800:1cyc
00f0dd: 23

[	LD C , [ HL ]] Z80:8cyc, R800:4cyc
00f0de: 4e

[	LD A , C] Z80:5cyc, R800:2cyc
00f0df: 79

[	OR A , D] Z80:5cyc, R800:1cyc
00f0e0: b2

[	OR A , E] Z80:5cyc, R800:1cyc
00f0e1: b3

[	JR NZ , FOUND_PARTITION] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0e2: 20 07

[	LD E , 16 - 2] Z80:8cyc, R800:2cyc
00f0e4: 1e 0e

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f0e6: 19

[	DJNZ TEST_PARTITION_LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0e7: 10 f1

[	SCF] Z80:5cyc, R800:1cyc
00f0e9: 37

[	RET] Z80:11cyc, R800:5cyc
00f0ea: c9

[FOUND_PARTITION :]
	label address: 0x00f0eb

[	LD B , 1] Z80:8cyc, R800:2cyc
00f0eb: 06 01

[	LD HL , BUFFER] Z80:11cyc, R800:3cyc
00f0ed: 21 00 c0

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f0f0: cd 69 f4

[SD_CARD_IS_FAT :]
	label address: 0x00f0f3

[	LD HL , [ BUFFER + PBR_RESERVED_SECTORS ]] Z80:17cyc, R800:7cyc
00f0f3: 2a 0e c0

[	DEC HL] Z80:7cyc, R800:1cyc
00f0f6: 2b

[	LD A , [ BUFFER + PBR_NUM_OF_FAT ]] Z80:14cyc, R800:6cyc
00f0f7: 3a 10 c0

[	LD B , A] Z80:5cyc, R800:2cyc
00f0fa: 47

[	LD A , C] Z80:5cyc, R800:2cyc
00f0fb: 79

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f0fc: 19

[	ADC A , 0] Z80:8cyc, R800:2cyc
00f0fd: ce 00

[	LD DE , [ BUFFER + PBR_SECTORS_PER_FAT ]] Z80:22cyc, R800:8cyc
00f0ff: ed 5b 16 c0

[ADD_FAT_SIZE :]
	label address: 0x00f103

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f103: 19

[	ADC A , 0] Z80:8cyc, R800:2cyc
00f104: ce 00

[	DJNZ ADD_FAT_SIZE] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f106: 10 fb

[	LD C , A] Z80:5cyc, R800:2cyc
00f108: 4f

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f109: eb

[	ENDSCOPE]
	Scope path: 

[	SCOPE SEARCH_BIOS_NAME]
	Scope path: SEARCH_BIOS_NAME:

[SEARCH_BIOS_NAME ::]
	global label address: 0x00f10a

[	LD HL , [ BUFFER + PBR_SECTORS_PER_FAT ]] Z80:17cyc, R800:7cyc
00f10a: 2a 16 c0

[	LD [ REMAIN_FAT_SECTORS ] , HL] Z80:17cyc, R800:7cyc
00f10d: 22 03 f6

[	LD HL , [ BUFFER + PBR_ROOT_ENTRIES ]] Z80:17cyc, R800:7cyc
00f110: 2a 11 c0

[	LD A , L] Z80:5cyc, R800:2cyc
00f113: 7d

[	LD B , 4] Z80:8cyc, R800:2cyc
00f114: 06 04

[ENTRIES_TO_SECTORS :]
	label address: 0x00f116

[	SRL H] Z80:10cyc, R800:2cyc
00f116: cb 3c

[	RR L] Z80:10cyc, R800:2cyc
00f118: cb 1d

[	DJNZ ENTRIES_TO_SECTORS] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f11a: 10 fa

[	AND A , 0X0F] Z80:8cyc, R800:2cyc
00f11c: e6 0f

[	JR Z , SKIP_INC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f11e: 28 01

[	INC HL] Z80:7cyc, R800:1cyc
00f120: 23

[SKIP_INC :]
	label address: 0x00f121

[	LD A , C] Z80:5cyc, R800:2cyc
00f121: 79

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f122: 19

[	ADC A , B] Z80:5cyc, R800:1cyc
00f123: 88

[	LD [ DATA_AREA + 0 ] , HL] Z80:17cyc, R800:7cyc
00f124: 22 08 f6

[	LD [ DATA_AREA + 2 ] , A] Z80:14cyc, R800:6cyc
00f127: 32 0a f6

[GET_NEXT_SECTOR :]
	label address: 0x00f12a

[	INC B] Z80:5cyc, R800:1cyc
00f12a: 04

[	LD HL , FAT_BUFFER] Z80:11cyc, R800:3cyc
00f12b: 21 00 c2

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f12e: cd 69 f4

[	LD A , C] Z80:5cyc, R800:2cyc
00f131: 79

[	LD [ ROOT_ENTRIES + 0 ] , DE] Z80:22cyc, R800:8cyc
00f132: ed 53 05 f6

[	LD [ ROOT_ENTRIES + 2 ] , A] Z80:14cyc, R800:6cyc
00f136: 32 07 f6

[	LD B , 512 / DIR_ENTRY_SIZE] Z80:8cyc, R800:2cyc
00f139: 06 10

[	LD HL , FAT_BUFFER + 10] Z80:11cyc, R800:3cyc
00f13b: 21 0a c2

[SEARCH_LOOP :]
	label address: 0x00f13e

[	PUSH HL] Z80:12cyc, R800:6cyc
00f13e: e5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f13f: c5

[	LD DE , BIOS_NAME + 10] Z80:11cyc, R800:3cyc
00f140: 11 88 f1

[	LD A , 48] Z80:8cyc, R800:2cyc
00f143: 3e 30

[	LD B , 10] Z80:8cyc, R800:2cyc
00f145: 06 0a

[NUMCMP :]
	label address: 0x00f147

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f147: be

[	JR Z , CHAR_FOUND] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f148: 28 07

[	INC A] Z80:5cyc, R800:1cyc
00f14a: 3c

[	DJNZ NUMCMP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f14b: 10 fa

[	LD B , 11] Z80:8cyc, R800:2cyc
00f14d: 06 0b

[	JR STRCMP] Z80:13cyc, R800:3cyc
00f14f: 18 04

[CHAR_FOUND :]
	label address: 0x00f151

[	LD B , 10] Z80:8cyc, R800:2cyc
00f151: 06 0a

[	DEC DE] Z80:7cyc, R800:1cyc
00f153: 1b

[	DEC HL] Z80:7cyc, R800:1cyc
00f154: 2b

[STRCMP :]
	label address: 0x00f155

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f155: 1a

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f156: be

[	JR NZ , NO_MATCH] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f157: 20 04

[	DEC DE] Z80:7cyc, R800:1cyc
00f159: 1b

[	DEC HL] Z80:7cyc, R800:1cyc
00f15a: 2b

[	DJNZ STRCMP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f15b: 10 f8

[NO_MATCH :]
	label address: 0x00f15d

[	POP BC] Z80:11cyc, R800:5cyc
00f15d: c1

[	POP HL] Z80:11cyc, R800:5cyc
00f15e: e1

[	JR Z , FOUND_BIOS_NAME] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f15f: 28 28

[	LD DE , DIR_ENTRY_SIZE] Z80:11cyc, R800:3cyc
00f161: 11 20 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f164: 19

[	DJNZ SEARCH_LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f165: 10 d7

[	LD DE , [ REMAIN_FAT_SECTORS ]] Z80:22cyc, R800:8cyc
00f167: ed 5b 03 f6

[	DEC DE] Z80:7cyc, R800:1cyc
00f16b: 1b

[	LD [ REMAIN_FAT_SECTORS ] , DE] Z80:22cyc, R800:8cyc
00f16c: ed 53 03 f6

[	LD A , D] Z80:5cyc, R800:2cyc
00f170: 7a

[	OR A , E] Z80:5cyc, R800:1cyc
00f171: b3

[	SCF] Z80:5cyc, R800:1cyc
00f172: 37

[	RET Z] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f173: c8

[	LD A , [ ROOT_ENTRIES + 2 ]] Z80:14cyc, R800:6cyc
00f174: 3a 07 f6

[	LD DE , [ ROOT_ENTRIES + 0 ]] Z80:22cyc, R800:8cyc
00f177: ed 5b 05 f6

[	LD C , A] Z80:5cyc, R800:2cyc
00f17b: 4f

[	JR GET_NEXT_SECTOR] Z80:13cyc, R800:3cyc
00f17c: 18 ac

[BIOS_NAME :]
	label address: 0x00f17e

[	DS "OCM-BIOSDAT"]
00f17e: 4f 43 4d 2d 42 49 4f 53
00f186: 44 41 54

[	ENDSCOPE]
	Scope path: 

[	SCOPE FOUND_BIOS_NAME]
	Scope path: FOUND_BIOS_NAME:

[FOUND_BIOS_NAME ::]
	global label address: 0x00f189

[	LD DE , DIR_ATTRIBUTE - 10] Z80:11cyc, R800:3cyc
00f189: 11 01 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f18c: 19

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f18d: 7e

[	AND A , ATTR_VOLUME_ID | ATTR_DIRECTORY] Z80:8cyc, R800:2cyc
00f18e: e6 18

[NO_MATCH_EXIT ::]
	global label address: 0x00f190

[	SCF] Z80:5cyc, R800:1cyc
00f190: 37

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f191: c0

[	LD E , - DIR_ATTRIBUTE + DIR_FST_CLUS_LO] Z80:8cyc, R800:2cyc
00f192: 1e 0f

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f194: 19

[	LD E , [ HL ]] Z80:8cyc, R800:4cyc
00f195: 5e

[	INC HL] Z80:7cyc, R800:1cyc
00f196: 23

[	LD D , [ HL ]] Z80:8cyc, R800:4cyc
00f197: 56

[	DEC DE] Z80:7cyc, R800:1cyc
00f198: 1b

[	DEC DE] Z80:7cyc, R800:1cyc
00f199: 1b

[	LD A , [ BUFFER + PBR_SECTORS_PER_CLUSTER ]] Z80:14cyc, R800:6cyc
00f19a: 3a 0d c0

[	LD B , A] Z80:5cyc, R800:2cyc
00f19d: 47

[	XOR A , A] Z80:5cyc, R800:1cyc
00f19e: af

[	LD H , A] Z80:5cyc, R800:2cyc
00f19f: 67

[	LD L , A] Z80:5cyc, R800:2cyc
00f1a0: 6f

[	LD C , A] Z80:5cyc, R800:2cyc
00f1a1: 4f

[LOOP :]
	label address: 0x00f1a2

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f1a2: 19

[	ADC A , C] Z80:5cyc, R800:1cyc
00f1a3: 89

[	DJNZ LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f1a4: 10 fc

[	LD C , A] Z80:5cyc, R800:2cyc
00f1a6: 4f

[	LD DE , [ DATA_AREA + 0 ]] Z80:22cyc, R800:8cyc
00f1a7: ed 5b 08 f6

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f1ab: 19

[	LD A , [ DATA_AREA + 2 ]] Z80:14cyc, R800:6cyc
00f1ac: 3a 0a f6

[	ADC A , C] Z80:5cyc, R800:1cyc
00f1af: 89

[	LD C , A] Z80:5cyc, R800:2cyc
00f1b0: 4f

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f1b1: eb

[	ENDSCOPE]
	Scope path: 

[	SCOPE LOAD_SDBIOS]
	Scope path: LOAD_SDBIOS:

[LOAD_SDBIOS ::]
	global label address: 0x00f1b2

[	LD HL , SDBIOS_IMAGE_TABLE] Z80:11cyc, R800:3cyc
00f1b2: 21 8f f0

[	JR LOAD_BIOS] Z80:13cyc, R800:3cyc
00f1b5: 18 4a

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//../subroutine/ocm_iplrom_fat_driver.asm"] end

[	INCLUDE ".//../subroutine/ocm_iplrom_serial_rom_512k.asm"] begin
[	SCOPE LOAD_FROM_EPCS]
	Scope path: LOAD_FROM_EPCS:

[LOAD_FROM_EPCS ::]
	global label address: 0x00f1b7

[	LD HL , READ_SECTOR_FROM_EPCS] Z80:11cyc, R800:3cyc
00f1b7: 21 91 f0

[	LD [ READ_SECTOR_CBR ] , HL] Z80:17cyc, R800:7cyc
00f1ba: 22 92 f2

[	LD A , 0X60] Z80:8cyc, R800:2cyc
00f1bd: 3e 60

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f1bf: 32 00 60

[	INC A] Z80:5cyc, R800:1cyc
00f1c2: 3c

[	LD [ MEGASD_MODE_REGISTER ] , A] Z80:14cyc, R800:6cyc
00f1c3: 32 00 58

[	LD B , 160] Z80:8cyc, R800:2cyc
00f1c6: 06 a0

[DUMMY_READ :]
	label address: 0x00f1c8

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f1c8: 3a 00 50

[	NOP] Z80:5cyc, R800:1cyc
00f1cb: 00

[	DJNZ DUMMY_READ] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f1cc: 10 fa

[	LD A , [ MEGASD_SD_REGISTER | ( 0 << 12 ) ]] Z80:14cyc, R800:6cyc
00f1ce: 3a 00 40

[	XOR A , A] Z80:5cyc, R800:1cyc
00f1d1: af

[	LD [ MEGASD_MODE_REGISTER ] , A] Z80:14cyc, R800:6cyc
00f1d2: 32 00 58

[	LD DE , EPCS_BIOS1_START_ADDRESS] Z80:11cyc, R800:3cyc
00f1d5: 11 00 08

[	IN A , [ 0X4C ]] Z80:12cyc, R800:10 or 9cyc
00f1d8: db 4c

[	AND A , 0B01000000] Z80:8cyc, R800:2cyc
00f1da: e6 40

[	LD A , ICON_EPCS1_ANI + 2 * ( 1 - EPCS_ANI_ENABLER )] Z80:8cyc, R800:2cyc
00f1dc: 3e 15

[	LD [ ANIMATION_ID + 2 ] , A] Z80:14cyc, R800:6cyc
00f1de: 32 0f f6

[	LD A , ICON_EPCS1_ANI + 2] Z80:8cyc, R800:2cyc
00f1e1: 3e 17

[	LD [ ANIMATION_ID + 1 ] , A] Z80:14cyc, R800:6cyc
00f1e3: 32 0e f6

[	LD A , ICON_EPCS1] Z80:8cyc, R800:2cyc
00f1e6: 3e 05

[	JR Z , LOAD_EPBIOS_START] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f1e8: 28 0e

[	LD A , ICON_EPCS2_ANI + 2 * ( 1 - EPCS_ANI_ENABLER )] Z80:8cyc, R800:2cyc
00f1ea: 3e 19

[	LD [ ANIMATION_ID + 2 ] , A] Z80:14cyc, R800:6cyc
00f1ec: 32 0f f6

[	LD A , ICON_EPCS2_ANI + 2] Z80:8cyc, R800:2cyc
00f1ef: 3e 1b

[	LD [ ANIMATION_ID + 1 ] , A] Z80:14cyc, R800:6cyc
00f1f1: 32 0e f6

[	LD A , ICON_EPCS2] Z80:8cyc, R800:2cyc
00f1f4: 3e 09

[	LD D , EPCS_BIOS2_START_ADDRESS >> 8] Z80:8cyc, R800:2cyc
00f1f6: 16 0c

[LOAD_EPBIOS_START ::]
	global label address: 0x00f1f8

[	LD [ ANIMATION_ID ] , A] Z80:14cyc, R800:6cyc
00f1f8: 32 0d f6

[	CALL VDP_PUT_ICON] Z80:18cyc, R800:5cyc
00f1fb: cd ed f5

[	LD HL , EPBIOS_IMAGE_TABLE] Z80:11cyc, R800:3cyc
00f1fe: 21 8f f0

[	ENDSCOPE]
	Scope path: 

[IF ( EPCS_BIOS1_START_ADDRESS & 0XFF ) != ( EPCS_BIOS2_START_ADDRESS & 0XFF )]

[ENDIF]
	All condition is not selected.


[	INCLUDE ".//../subroutine/ocm_iplrom_serial_rom_512k.asm"] end

[	INCLUDE ".//../subroutine/ocm_iplrom_load_bios.asm"] begin
[	SCOPE LOAD_BIOS]
	Scope path: LOAD_BIOS:

[LOAD_BIOS ::]
	global label address: 0x00f201

[	LD A , 0XD4] Z80:8cyc, R800:2cyc
00f201: 3e d4

[	LD [ BIOS_UPDATING ] , A] Z80:14cyc, R800:6cyc
00f203: 32 0c f6

[	LD A , DOS_ROM1_BANK] Z80:8cyc, R800:2cyc
00f206: 3e 80

[	LD [ BANK_ID ] , A] Z80:14cyc, R800:6cyc
00f208: 32 0b f6

[LOAD_BLOCK_LOOP ::]
	global label address: 0x00f20b

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f20b: 7e

[	INC HL] Z80:7cyc, R800:1cyc
00f20c: 23

[	CP A , 0X40] Z80:8cyc, R800:2cyc
00f20d: fe 40

[	JR C , LOAD_BIOS_IMAGES] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f20f: 38 76

[	JP Z , FILL_FF_OR_C9] Z80:11cyc, R800:5cyc(cond=true), 3cyc(cond=false)
00f211: ca db f2

[	CP A , 0XFE - 1] Z80:8cyc, R800:2cyc
00f214: fe fd

[	JR NC , EXIT_LOAD_BIOS] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f216: 30 0e

[FILL_ZERO :]
	label address: 0x00f218

[	PUSH HL] Z80:12cyc, R800:6cyc
00f218: e5

[	AND A , 0X3F] Z80:8cyc, R800:2cyc
00f219: e6 3f

[	LD B , A] Z80:5cyc, R800:2cyc
00f21b: 47

[	LD C , 0] Z80:8cyc, R800:2cyc
00f21c: 0e 00

[FILL_ZERO_LOOP :]
	label address: 0x00f21e

[	CALL FILL_BANK] Z80:18cyc, R800:5cyc
00f21e: cd f5 f2

[	DJNZ FILL_ZERO_LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f221: 10 fb

[	POP HL] Z80:11cyc, R800:5cyc
00f223: e1

[	JR LOAD_BLOCK_LOOP] Z80:13cyc, R800:3cyc
00f224: 18 e5

[EXIT_LOAD_BIOS :]
	label address: 0x00f226

[	RRCA] Z80:5cyc, R800:1cyc
00f226: 0f

[	CPL] Z80:5cyc, R800:1cyc
00f227: 2f

[	OUT [ 0X4E ] , A] Z80:12cyc, R800:10 or 9cyc
00f228: d3 4e

[	LD A , [ ANIMATION_ID ]] Z80:14cyc, R800:6cyc
00f22a: 3a 0d f6

[	CALL VDP_PUT_ICON] Z80:18cyc, R800:5cyc
00f22d: cd ed f5

[SET_F4_DEVICE ::]
	global label address: 0x00f230

[	CALL GET_MSX_VERSION] Z80:18cyc, R800:5cyc
00f230: cd ec f2

[	OUT [ 0X4C ] , A] Z80:12cyc, R800:10 or 9cyc
00f233: d3 4c

[	SUB A , 3] Z80:8cyc, R800:2cyc
00f235: d6 03

[	JR Z , S1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f237: 28 01

[	RET NC] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f239: d0

[S1 :]
	label address: 0x00f23a

[	OUT [ 0X4F ] , A] Z80:12cyc, R800:10 or 9cyc
00f23a: d3 4f

[	OUT [ 0XF4 ] , A] Z80:12cyc, R800:10 or 9cyc
00f23c: d3 f4

[ENFORCE_SLOT0_PRIMARY_MODE ::]
	global label address: 0x00f23e

[	IN A , [ 0XAA ]] Z80:12cyc, R800:10 or 9cyc
00f23e: db aa

[	AND A , 0XF0] Z80:8cyc, R800:2cyc
00f240: e6 f0

[	ADD A , 0X0B] Z80:8cyc, R800:2cyc
00f242: c6 0b

[	OUT [ 0XAA ] , A] Z80:12cyc, R800:10 or 9cyc
00f244: d3 aa

[	IN A , [ 0XA9 ]] Z80:12cyc, R800:10 or 9cyc
00f246: db a9

[	BIT 3 , A] Z80:10cyc, R800:2cyc
00f248: cb 5f

[	JR NZ , ENFORCE_EXTRA_MAPPER] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f24a: 20 05

[	LD A , 0XF9] Z80:8cyc, R800:2cyc
00f24c: 3e f9

[	OUT [ 0X41 ] , A] Z80:12cyc, R800:10 or 9cyc
00f24e: d3 41

[	CPL] Z80:5cyc, R800:1cyc
00f250: 2f

[ENFORCE_EXTRA_MAPPER :]
	label address: 0x00f251

[	BIT 1 , A] Z80:10cyc, R800:2cyc
00f251: cb 4f

[	JR NZ , BOOT_UP_BIOS] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f253: 20 04

[	LD A , 0X57] Z80:8cyc, R800:2cyc
00f255: 3e 57

[	OUT [ 0X41 ] , A] Z80:12cyc, R800:10 or 9cyc
00f257: d3 41

[BOOT_UP_BIOS ::]
	global label address: 0x00f259

[	CALL GET_MSX_VERSION] Z80:18cyc, R800:5cyc
00f259: cd ec f2

[	OR A , A] Z80:5cyc, R800:1cyc
00f25c: b7

[	JR Z , BANK_INIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f25d: 28 10

[SET_MSX2_PALETTE :]
	label address: 0x00f25f

[	LD A , 2] Z80:8cyc, R800:2cyc
00f25f: 3e 02

[	OUT [ VDP_PORT1 ] , A] Z80:12cyc, R800:10 or 9cyc
00f261: d3 99

[	LD A , 0X90] Z80:8cyc, R800:2cyc
00f263: 3e 90

[	OUT [ VDP_PORT1 ] , A] Z80:12cyc, R800:10 or 9cyc
00f265: d3 99

[	LD BC , ( ( VDP_MSX2_PALETTE_REGS_END - VDP_MSX2_PALETTE_REGS ) << 8 ) | VDP_PORT2] Z80:11cyc, R800:3cyc
00f267: 01 9a 1a

[	LD HL , VDP_MSX2_PALETTE_REGS] Z80:11cyc, R800:3cyc
00f26a: 21 d3 f5

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f26d: ed b3

[BANK_INIT :]
	label address: 0x00f26f

[	XOR A , A] Z80:5cyc, R800:1cyc
00f26f: af

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f270: d3 40

[	LD [ BIOS_UPDATING ] , A] Z80:14cyc, R800:6cyc
00f272: 32 0c f6

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f275: 32 00 60

[	INC A] Z80:5cyc, R800:1cyc
00f278: 3c

[	LD [ ESERAM8K_BANK1 ] , A] Z80:14cyc, R800:6cyc
00f279: 32 00 68

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f27c: 32 00 70

[	LD [ ESERAM8K_BANK3 ] , A] Z80:14cyc, R800:6cyc
00f27f: 32 00 78

[	LD A , 0XC0] Z80:8cyc, R800:2cyc
00f282: 3e c0

[	OUT [ PRIMARY_SLOT_REGISTER ] , A] Z80:12cyc, R800:10 or 9cyc
00f284: d3 a8

[	RST 00] Z80:12cyc, R800:6 or 7cyc
00f286: c7

[	ENDSCOPE]
	Scope path: 

[	SCOPE LOAD_BIOS_IMAGES]
	Scope path: LOAD_BIOS_IMAGES:

[LOAD_BIOS_IMAGES ::]
	global label address: 0x00f287

[LOOP :]
	label address: 0x00f287

[	EX AF , AF'] Z80:5cyc, R800:1cyc
00f287: 08

[	CALL SET_BANK] Z80:18cyc, R800:5cyc
00f288: cd 08 f3

[	PUSH HL] Z80:12cyc, R800:6cyc
00f28b: e5

[	LD B , 16384 / 512] Z80:8cyc, R800:2cyc
00f28c: 06 20

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f28e: 21 00 80

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f291: cd 69 f4

[	POP HL] Z80:11cyc, R800:5cyc
00f294: e1

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f295: d8

[	LD A , [ BANK_ID ]] Z80:14cyc, R800:6cyc
00f296: 3a 0b f6

[	CP A , JIS1_KANJI1_BANK] Z80:8cyc, R800:2cyc
00f299: fe a0

[	JR Z , MAKE_CBIOS_CHECK] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f29b: 28 0f

[	CP A , DOS_ROM2_BANK] Z80:8cyc, R800:2cyc
00f29d: fe 82

[	JR NZ , SKIP_AB_CHECK] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f29f: 20 04

[	CALL AB_CHECK] Z80:18cyc, R800:5cyc
00f2a1: cd b1 f2

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f2a4: c0

[SKIP_AB_CHECK :]
	label address: 0x00f2a5

[	EX AF , AF'] Z80:5cyc, R800:1cyc
00f2a5: 08

[	DEC A] Z80:5cyc, R800:1cyc
00f2a6: 3d

[	JR NZ , LOOP] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2a7: 20 de

[	JP LOAD_BLOCK_LOOP] Z80:11cyc, R800:5cyc
00f2a9: c3 0b f2

[MAKE_CBIOS_CHECK :]
	label address: 0x00f2ac

[	CALL CBIOS_CHECK] Z80:18cyc, R800:5cyc
00f2ac: cd be f2

[	JR SKIP_AB_CHECK] Z80:13cyc, R800:3cyc
00f2af: 18 f4

[	ENDSCOPE]
	Scope path: 

[	SCOPE AB_CHECK]
	Scope path: AB_CHECK:

[AB_CHECK ::]
	global label address: 0x00f2b1

[	PUSH HL] Z80:12cyc, R800:6cyc
00f2b1: e5

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f2b2: 21 00 80

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f2b5: 7e

[	XOR A , 65] Z80:8cyc, R800:2cyc
00f2b6: ee 41

[	XOR A , 66] Z80:8cyc, R800:2cyc
00f2b8: ee 42

[	INC HL] Z80:7cyc, R800:1cyc
00f2ba: 23

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f2bb: be

[	POP HL] Z80:11cyc, R800:5cyc
00f2bc: e1

[	RET] Z80:11cyc, R800:5cyc
00f2bd: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE CBIOS_CHECK]
	Scope path: CBIOS_CHECK:

[CBIOS_CHECK ::]
	global label address: 0x00f2be

[	PUSH HL] Z80:12cyc, R800:6cyc
00f2be: e5

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f2bf: 21 00 80

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f2c2: 7e

[	XOR A , 67] Z80:8cyc, R800:2cyc
00f2c3: ee 43

[	XOR A , 45] Z80:8cyc, R800:2cyc
00f2c5: ee 2d

[	INC HL] Z80:7cyc, R800:1cyc
00f2c7: 23

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f2c8: be

[	POP HL] Z80:11cyc, R800:5cyc
00f2c9: e1

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f2ca: c0

[	LD A , 0XF9] Z80:8cyc, R800:2cyc
00f2cb: 3e f9

[	OUT [ 0X41 ] , A] Z80:12cyc, R800:10 or 9cyc
00f2cd: d3 41

[	PUSH BC] Z80:12cyc, R800:6cyc
00f2cf: c5

[	LD BC , 0XC000] Z80:11cyc, R800:3cyc
00f2d0: 01 00 c0

[WAIT_A_MOMENT :]
	label address: 0x00f2d3

[	DEC C] Z80:5cyc, R800:1cyc
00f2d3: 0d

[	CP A , C] Z80:5cyc, R800:1cyc
00f2d4: b9

[	JR NZ , WAIT_A_MOMENT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2d5: 20 fc

[	DJNZ WAIT_A_MOMENT] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2d7: 10 fa

[	POP BC] Z80:11cyc, R800:5cyc
00f2d9: c1

[	RET] Z80:11cyc, R800:5cyc
00f2da: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE FILL_FF_OR_C9]
	Scope path: FILL_FF_OR_C9:

[FILL_FF_OR_C9 ::]
	global label address: 0x00f2db

[	CALL GET_MSX_VERSION] Z80:18cyc, R800:5cyc
00f2db: cd ec f2

[	CP A , 3] Z80:8cyc, R800:2cyc
00f2de: fe 03

[	LD C , 0XFF] Z80:8cyc, R800:2cyc
00f2e0: 0e ff

[	JR C , FILL_FF] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2e2: 38 02

[	LD C , 0XC9] Z80:8cyc, R800:2cyc
00f2e4: 0e c9

[FILL_FF :]
	label address: 0x00f2e6

[	CALL FILL_BANK] Z80:18cyc, R800:5cyc
00f2e6: cd f5 f2

[	JP LOAD_BLOCK_LOOP] Z80:11cyc, R800:5cyc
00f2e9: c3 0b f2

[	ENDSCOPE]
	Scope path: 

[	SCOPE GET_MSX_VERSION]
	Scope path: GET_MSX_VERSION:

[GET_MSX_VERSION ::]
	global label address: 0x00f2ec

[	LD A , MAIN_ROM1_BANK] Z80:8cyc, R800:2cyc
00f2ec: 3e 90

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f2ee: 32 00 70

[	LD A , [ 0X8000 + 0X002D ]] Z80:14cyc, R800:6cyc
00f2f1: 3a 2d 80

[	RET] Z80:11cyc, R800:5cyc
00f2f4: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE FILL_BANK]
	Scope path: FILL_BANK:

[FILL_BANK ::]
	global label address: 0x00f2f5

[	CALL SET_BANK] Z80:18cyc, R800:5cyc
00f2f5: cd 08 f3

[	LD A , C] Z80:5cyc, R800:2cyc
00f2f8: 79

[	EXX] Z80:5cyc, R800:1cyc
00f2f9: d9

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f2fa: 21 00 80

[	LD DE , 0X8001] Z80:11cyc, R800:3cyc
00f2fd: 11 01 80

[	LD BC , 0X4000 - 1] Z80:11cyc, R800:3cyc
00f300: 01 ff 3f

[	LD [ HL ] , A] Z80:8cyc, R800:4cyc
00f303: 77

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00f304: ed b0

[	EXX] Z80:5cyc, R800:1cyc
00f306: d9

[	RET] Z80:11cyc, R800:5cyc
00f307: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SET_BANK]
	Scope path: SET_BANK:

[SET_BANK ::]
	global label address: 0x00f308

[	LD A , [ ANIMATION_ID + 1 ]] Z80:14cyc, R800:6cyc
00f308: 3a 0e f6

[	PUSH AF] Z80:12cyc, R800:6cyc
00f30b: f5

[	LD A , [ ANIMATION_ID + 2 ]] Z80:14cyc, R800:6cyc
00f30c: 3a 0f f6

[	LD [ ANIMATION_ID + 1 ] , A] Z80:14cyc, R800:6cyc
00f30f: 32 0e f6

[	PUSH BC] Z80:12cyc, R800:6cyc
00f312: c5

[	PUSH HL] Z80:12cyc, R800:6cyc
00f313: e5

[	CALL VDP_PUT_ANIMATION] Z80:18cyc, R800:5cyc
00f314: cd f3 f5

[	POP HL] Z80:11cyc, R800:5cyc
00f317: e1

[	POP BC] Z80:11cyc, R800:5cyc
00f318: c1

[	POP AF] Z80:11cyc, R800:5cyc
00f319: f1

[	LD [ ANIMATION_ID + 2 ] , A] Z80:14cyc, R800:6cyc
00f31a: 32 0f f6

[	LD A , [ BANK_ID ]] Z80:14cyc, R800:6cyc
00f31d: 3a 0b f6

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f320: 32 00 70

[	INC A] Z80:5cyc, R800:1cyc
00f323: 3c

[	LD [ ESERAM8K_BANK3 ] , A] Z80:14cyc, R800:6cyc
00f324: 32 00 78

[	INC A] Z80:5cyc, R800:1cyc
00f327: 3c

[	LD [ BANK_ID ] , A] Z80:14cyc, R800:6cyc
00f328: 32 0b f6

[	RET] Z80:11cyc, R800:5cyc
00f32b: c9

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//../subroutine/ocm_iplrom_load_bios.asm"] end

[	INCLUDE ".//../subroutine/ocm_iplrom_sd_driver.asm"] begin
[	SCOPE SET_SD_COMMAND]
	Scope path: SET_SD_COMMAND:

[SET_SD_COMMAND ::]
	global label address: 0x00f32c

[	LD A , [ CARD_TYPE ]] Z80:14cyc, R800:6cyc
00f32c: 3a cf ff

[	CP A , TYPE_SDHC] Z80:8cyc, R800:2cyc
00f32f: fe 03

[	JR C , SET_SD_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f331: 38 09

[SET_SDHC :]
	label address: 0x00f333

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f333: 7e

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f334: 70

[	LD [ HL ] , 0] Z80:11cyc, R800:5cyc
00f335: 36 00

[	LD [ HL ] , C] Z80:8cyc, R800:4cyc
00f337: 71

[	LD [ HL ] , D] Z80:8cyc, R800:4cyc
00f338: 72

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f339: 73

[	JR SET_SRC95] Z80:13cyc, R800:3cyc
00f33a: 18 0d

[SET_SD_MMC :]
	label address: 0x00f33c

[	SLA E] Z80:10cyc, R800:2cyc
00f33c: cb 23

[	RL D] Z80:10cyc, R800:2cyc
00f33e: cb 12

[	RL C] Z80:10cyc, R800:2cyc
00f340: cb 11

[SEND_COMMAND ::]
	global label address: 0x00f342

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f342: 7e

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f343: 70

[	LD [ HL ] , C] Z80:8cyc, R800:4cyc
00f344: 71

[	LD [ HL ] , D] Z80:8cyc, R800:4cyc
00f345: 72

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f346: 73

[	LD [ HL ] , 0] Z80:11cyc, R800:5cyc
00f347: 36 00

[SET_SRC95 :]
	label address: 0x00f349

[	LD [ HL ] , 0X95] Z80:11cyc, R800:5cyc
00f349: 36 95

[	LD B , 16] Z80:8cyc, R800:2cyc
00f34b: 06 10

[RECEIVE_RESPONSE ::]
	global label address: 0x00f34d

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f34d: 7e

[WAIT_COMMAND_ACCEPT :]
	label address: 0x00f34e

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f34e: 7e

[	CP A , 0XFF] Z80:8cyc, R800:2cyc
00f34f: fe ff

[	CCF] Z80:5cyc, R800:1cyc
00f351: 3f

[	RET NC] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f352: d0

[	DJNZ WAIT_COMMAND_ACCEPT] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f353: 10 f9

[	RET] Z80:11cyc, R800:5cyc
00f355: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SD_INITIALIZE]
	Scope path: SD_INITIALIZE:

[WAIT_BUSY ::]
	global label address: 0x00f356

[	LD A , [ MEGASD_STATUS_REGISTER ]] Z80:14cyc, R800:6cyc
00f356: 3a 00 58

[	RLCA] Z80:5cyc, R800:1cyc
00f359: 07

[	JR C , WAIT_BUSY] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f35a: 38 fa

[	RET] Z80:11cyc, R800:5cyc
00f35c: c9

[SEND_CMD0 :]
	label address: 0x00f35d

[	LD B , 10] Z80:8cyc, R800:2cyc
00f35d: 06 0a

[WAIT_CS :]
	label address: 0x00f35f

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f35f: 3a 00 50

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f362: cd 56 f3

[	DJNZ WAIT_CS] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f365: 10 f8

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f367: 7e

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f368: cd 56 f3

[	LD [ HL ] , 0X40 | SDCMD_GO_IDLE_STATE] Z80:11cyc, R800:5cyc
00f36b: 36 40

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f36d: cd 56 f3

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f370: 70

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f371: cd 56 f3

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f374: 70

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f375: cd 56 f3

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f378: 70

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f379: cd 56 f3

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f37c: 70

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f37d: cd 56 f3

[	LD [ HL ] , 0X95] Z80:11cyc, R800:5cyc
00f380: 36 95

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f382: cd 56 f3

[	RET] Z80:11cyc, R800:5cyc
00f385: c9

[ERROR_EXIT :]
	label address: 0x00f386

[	XOR A , A] Z80:5cyc, R800:1cyc
00f386: af

[	LD [ MEGASD_MODE_REGISTER ] , A] Z80:14cyc, R800:6cyc
00f387: 32 00 58

[	SCF] Z80:5cyc, R800:1cyc
00f38a: 37

[	RET] Z80:11cyc, R800:5cyc
00f38b: c9

[SD_INITIALIZE ::]
	global label address: 0x00f38c

[	LD A , 0X40] Z80:8cyc, R800:2cyc
00f38c: 3e 40

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f38e: 32 00 60

[	XOR A , A] Z80:5cyc, R800:1cyc
00f391: af

[	LD [ MEGASD_MODE_REGISTER ] , A] Z80:14cyc, R800:6cyc
00f392: 32 00 58

[	LD B , A] Z80:5cyc, R800:2cyc
00f395: 47

[	LD HL , MEGASD_SD_REGISTER] Z80:11cyc, R800:3cyc
00f396: 21 00 40

[DUMMY_READ1 :]
	label address: 0x00f399

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f399: be

[	DJNZ DUMMY_READ1] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f39a: 10 fd

[DUMMY_READ2 :]
	label address: 0x00f39c

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f39c: be

[	DJNZ DUMMY_READ2] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f39d: 10 fd

[	LD A , 0X80] Z80:8cyc, R800:2cyc
00f39f: 3e 80

[	LD [ MEGASD_MODE_REGISTER ] , A] Z80:14cyc, R800:6cyc
00f3a1: 32 00 58

[	CALL SEND_CMD0] Z80:18cyc, R800:5cyc
00f3a4: cd 5d f3

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3a7: 7e

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f3a8: cd 56 f3

[	CALL SEND_CMD0] Z80:18cyc, R800:5cyc
00f3ab: cd 5d f3

[	LD B , 16] Z80:8cyc, R800:2cyc
00f3ae: 06 10

[GET_R1_WAIT :]
	label address: 0x00f3b0

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3b0: 7e

[	CALL WAIT_BUSY] Z80:18cyc, R800:5cyc
00f3b1: cd 56 f3

[	LD A , [ MEGASD_LAST_DATA_REGISTER ]] Z80:14cyc, R800:6cyc
00f3b4: 3a 00 5c

[	CP A , 0XFF] Z80:8cyc, R800:2cyc
00f3b7: fe ff

[	JR C , SKIP] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3b9: 38 04

[	DJNZ GET_R1_WAIT] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3bb: 10 f3

[	JR ERROR_EXIT] Z80:13cyc, R800:3cyc
00f3bd: 18 c7

[SKIP :]
	label address: 0x00f3bf

[	AND A , 0XF3] Z80:8cyc, R800:2cyc
00f3bf: e6 f3

[	SUB A , 0X01] Z80:8cyc, R800:2cyc
00f3c1: d6 01

[	JR NZ , ERROR_EXIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3c3: 20 c1

[	LD [ CARD_TYPE ] , A] Z80:14cyc, R800:6cyc
00f3c5: 32 cf ff

[	XOR A , A] Z80:5cyc, R800:1cyc
00f3c8: af

[	LD [ MEGASD_MODE_REGISTER ] , A] Z80:14cyc, R800:6cyc
00f3c9: 32 00 58

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f3cc: be

[	LD [ HL ] , 0X40 | SDCMD_SEND_IF_COND] Z80:11cyc, R800:5cyc
00f3cd: 36 48

[	LD [ HL ] , A] Z80:8cyc, R800:4cyc
00f3cf: 77

[	LD [ HL ] , A] Z80:8cyc, R800:4cyc
00f3d0: 77

[	LD [ HL ] , 0X01] Z80:11cyc, R800:5cyc
00f3d1: 36 01

[	LD [ HL ] , 0XAA] Z80:11cyc, R800:5cyc
00f3d3: 36 aa

[	LD [ HL ] , 0X87] Z80:11cyc, R800:5cyc
00f3d5: 36 87

[	LD B , 16] Z80:8cyc, R800:2cyc
00f3d7: 06 10

[	CALL RECEIVE_RESPONSE] Z80:18cyc, R800:5cyc
00f3d9: cd 4d f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3dc: d8

[	DEC A] Z80:5cyc, R800:1cyc
00f3dd: 3d

[	JR NZ , CHECK_SD1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3de: 20 4b

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3e0: 7e

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3e1: 7e

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3e2: 7e

[	AND A , 0X0F] Z80:8cyc, R800:2cyc
00f3e3: e6 0f

[	DEC A] Z80:5cyc, R800:1cyc
00f3e5: 3d

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3e6: 7e

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3e7: c0

[	CP A , 0XAA] Z80:8cyc, R800:2cyc
00f3e8: fe aa

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3ea: c0

[RETRY_ACMD41_V2 :]
	label address: 0x00f3eb

[	LD BC , 0X2000] Z80:11cyc, R800:3cyc
00f3eb: 01 00 20

[LOOP_ACMD41_V2 :]
	label address: 0x00f3ee

[	PUSH BC] Z80:12cyc, R800:6cyc
00f3ee: c5

[	LD BC , ( ( 0X40 | SDCMD_APP_CMD ) << 8 ) | 0X00] Z80:11cyc, R800:3cyc
00f3ef: 01 00 77

[	CALL SEND_COMMAND] Z80:18cyc, R800:5cyc
00f3f2: cd 42 f3

[	POP BC] Z80:11cyc, R800:5cyc
00f3f5: c1

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3f6: d8

[	DEC A] Z80:5cyc, R800:1cyc
00f3f7: 3d

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3f8: c0

[	PUSH BC] Z80:12cyc, R800:6cyc
00f3f9: c5

[	LD BC , ( ( 0X40 | SDACMD_APP_SEND_OP_COND ) << 8 ) | 0X40] Z80:11cyc, R800:3cyc
00f3fa: 01 40 69

[	CALL SEND_COMMAND] Z80:18cyc, R800:5cyc
00f3fd: cd 42 f3

[	POP BC] Z80:11cyc, R800:5cyc
00f400: c1

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f401: d8

[	AND A , 1] Z80:8cyc, R800:2cyc
00f402: e6 01

[	JR Z , READ_OCR] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f404: 28 0d

[	DJNZ LOOP_ACMD41_V2] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f406: 10 e6

[	DEC C] Z80:5cyc, R800:1cyc
00f408: 0d

[	LD A , C] Z80:5cyc, R800:2cyc
00f409: 79

[	CP A , 0] Z80:8cyc, R800:2cyc
00f40a: fe 00

[	JR NZ , LOOP_ACMD41_V2] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f40c: 20 e0

[	LD A , ICON_LOOP] Z80:8cyc, R800:2cyc
00f40e: 3e 11

[	JP STOP_WITH_ERROR] Z80:11cyc, R800:5cyc
00f410: c3 7c f0

[READ_OCR :]
	label address: 0x00f413

[	LD BC , ( ( 0X40 | SDCMD_READ_OCR ) << 8 ) | 0X00] Z80:11cyc, R800:3cyc
00f413: 01 00 7a

[	CALL SEND_COMMAND] Z80:18cyc, R800:5cyc
00f416: cd 42 f3

[	JR C , CHECK_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f419: 38 2d

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f41b: 7e

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f41c: be

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f41d: be

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f41e: be

[	BIT 6 , A] Z80:10cyc, R800:2cyc
00f41f: cb 77

[	LD A , TYPE_SDSC] Z80:8cyc, R800:2cyc
00f421: 3e 02

[	JR Z , IS_BYTE_ACCESS] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f423: 28 01

[	INC A] Z80:5cyc, R800:1cyc
00f425: 3c

[IS_BYTE_ACCESS :]
	label address: 0x00f426

[	LD [ CARD_TYPE ] , A] Z80:14cyc, R800:6cyc
00f426: 32 cf ff

[	XOR A , A] Z80:5cyc, R800:1cyc
00f429: af

[	RET] Z80:11cyc, R800:5cyc
00f42a: c9

[CHECK_SD1 :]
	label address: 0x00f42b

[RETRY_ACMD41_V1 :]
	label address: 0x00f42b

[	LD BC , ( ( 0X40 | SDCMD_APP_CMD ) << 8 ) | 0X00] Z80:11cyc, R800:3cyc
00f42b: 01 00 77

[	CALL SEND_COMMAND] Z80:18cyc, R800:5cyc
00f42e: cd 42 f3

[	JR C , CHECK_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f431: 38 15

[	DEC A] Z80:5cyc, R800:1cyc
00f433: 3d

[	JR NZ , CHECK_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f434: 20 12

[	LD BC , ( ( 0X40 | SDACMD_APP_SEND_OP_COND ) << 8 ) | 0X00] Z80:11cyc, R800:3cyc
00f436: 01 00 69

[	CALL SEND_COMMAND] Z80:18cyc, R800:5cyc
00f439: cd 42 f3

[	JR C , CHECK_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f43c: 38 0a

[	AND A , 1] Z80:8cyc, R800:2cyc
00f43e: e6 01

[	JR NZ , RETRY_ACMD41_V1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f440: 20 e9

[	LD A , TYPE_SDSC] Z80:8cyc, R800:2cyc
00f442: 3e 02

[	LD [ CARD_TYPE ] , A] Z80:14cyc, R800:6cyc
00f444: 32 cf ff

[	RET] Z80:11cyc, R800:5cyc
00f447: c9

[CHECK_MMC :]
	label address: 0x00f448

[RETRY_CMD1 :]
	label address: 0x00f448

[	LD BC , ( ( 0X40 | SDCMD_SEND_IO_COND ) << 8 ) | 0X00] Z80:11cyc, R800:3cyc
00f448: 01 00 41

[	CALL SEND_COMMAND] Z80:18cyc, R800:5cyc
00f44b: cd 42 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f44e: d8

[	BIT 2 , A] Z80:10cyc, R800:2cyc
00f44f: cb 57

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f451: c0

[	AND A , 1] Z80:8cyc, R800:2cyc
00f452: e6 01

[	JR NZ , RETRY_CMD1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f454: 20 f2

[	LD A , TYPE_MMC] Z80:8cyc, R800:2cyc
00f456: 3e 01

[	LD [ CARD_TYPE ] , A] Z80:14cyc, R800:6cyc
00f458: 32 cf ff

[	RET] Z80:11cyc, R800:5cyc
00f45b: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SD_READ_SECTOR]
	Scope path: SD_READ_SECTOR:

[TIMEOUT :]
	label address: 0x00f45c

[	POP BC] Z80:11cyc, R800:5cyc
00f45c: c1

[	POP DE] Z80:11cyc, R800:5cyc
00f45d: d1

[	SCF] Z80:5cyc, R800:1cyc
00f45e: 37

[	RET] Z80:11cyc, R800:5cyc
00f45f: c9

[RETRY_INIT :]
	label address: 0x00f460

[	CALL SD_INITIALIZE] Z80:18cyc, R800:5cyc
00f460: cd 8c f3

[	POP BC] Z80:11cyc, R800:5cyc
00f463: c1

[	POP DE] Z80:11cyc, R800:5cyc
00f464: d1

[	POP HL] Z80:11cyc, R800:5cyc
00f465: e1

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f466: d8

[	SCF] Z80:5cyc, R800:1cyc
00f467: 37

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f468: c0

[SD_READ_SECTOR ::]
	global label address: 0x00f469

[	PUSH HL] Z80:12cyc, R800:6cyc
00f469: e5

[	PUSH DE] Z80:12cyc, R800:6cyc
00f46a: d5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f46b: c5

[	LD B , 0X40 + SDCMD_READ_SINGLE_BLK] Z80:8cyc, R800:2cyc
00f46c: 06 51

[	LD HL , MEGASD_SD_REGISTER] Z80:11cyc, R800:3cyc
00f46e: 21 00 40

[	CALL SET_SD_COMMAND] Z80:18cyc, R800:5cyc
00f471: cd 2c f3

[	JR C , RETRY_INIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f474: 38 ea

[	POP BC] Z80:11cyc, R800:5cyc
00f476: c1

[	POP DE] Z80:11cyc, R800:5cyc
00f477: d1

[	POP HL] Z80:11cyc, R800:5cyc
00f478: e1

[	OR A , A] Z80:5cyc, R800:1cyc
00f479: b7

[	SCF] Z80:5cyc, R800:1cyc
00f47a: 37

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f47b: c0

[	PUSH DE] Z80:12cyc, R800:6cyc
00f47c: d5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f47d: c5

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f47e: eb

[	LD HL , MEGASD_SD_REGISTER] Z80:11cyc, R800:3cyc
00f47f: 21 00 40

[	LD B , H] Z80:5cyc, R800:2cyc
00f482: 44

[	LD C , L] Z80:5cyc, R800:2cyc
00f483: 4d

[READ_WAIT :]
	label address: 0x00f484

[	DEC BC] Z80:7cyc, R800:1cyc
00f484: 0b

[	LD A , C] Z80:5cyc, R800:2cyc
00f485: 79

[	OR A , B] Z80:5cyc, R800:1cyc
00f486: b0

[	JR Z , TIMEOUT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f487: 28 d3

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f489: 7e

[	CP A , 0XFE] Z80:8cyc, R800:2cyc
00f48a: fe fe

[	JR NZ , READ_WAIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f48c: 20 f6

[	LD BC , 0X0200] Z80:11cyc, R800:3cyc
00f48e: 01 00 02

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00f491: ed b0

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f493: eb

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f494: 1a

[	POP BC] Z80:11cyc, R800:5cyc
00f495: c1

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f496: 1a

[	POP DE] Z80:11cyc, R800:5cyc
00f497: d1

[	INC DE] Z80:7cyc, R800:1cyc
00f498: 13

[	LD A , D] Z80:5cyc, R800:2cyc
00f499: 7a

[	OR A , E] Z80:5cyc, R800:1cyc
00f49a: b3

[	JR NZ , SKIP] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f49b: 20 01

[	INC C] Z80:5cyc, R800:1cyc
00f49d: 0c

[SKIP :]
	label address: 0x00f49e

[	DJNZ SD_READ_SECTOR] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f49e: 10 c9

[	RET] Z80:11cyc, R800:5cyc
00f4a0: c9

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//../subroutine/ocm_iplrom_sd_driver.asm"] end

[	INCLUDE ".//../subroutine/ocm_iplrom_vdp_standard_icon_dual_epbios.asm"] begin
[VDP_CONTROL_REGS ::]
	global label address: 0x00f4a1

[	DB 0X1800 >> 10 , 0X82]
00f4a1: 06 82

[	DB 0X2000 >> 6 , 0X83]
00f4a3: 80 83

[	DB 0X0000 >> 11 , 0X84]
00f4a5: 00 84

[	DB 0X1B00 >> 7 , 0X85]
00f4a7: 36 85

[	DB 0X00 , 0X86]
00f4a9: 00 86

[	DB 0XF1 , 0X87]
00f4ab: f1 87

[	DB 0X00 , 0X8A]
00f4ad: 00 8a

[	DB 0X00 , 0X8B]
00f4af: 00 8b

[	DB 0X00 , 0X40]
00f4b1: 00 40

[VDP_CONTROL_REGS_END ::]
	global label address: 0x00f4b3

[VDP_MSX1_PALETTE_REGS ::]
	global label address: 0x00f4b3

[	DB 0X00 , 0X00]
00f4b3: 00 00

[	DB 0X00 , 0X00]
00f4b5: 00 00

[	DB 0X22 , 0X06]
00f4b7: 22 06

[	DB 0X34 , 0X07]
00f4b9: 34 07

[	DB 0X37 , 0X03]
00f4bb: 37 03

[	DB 0X47 , 0X04]
00f4bd: 47 04

[	DB 0X53 , 0X03]
00f4bf: 53 03

[	DB 0X47 , 0X06]
00f4c1: 47 06

[	DB 0X63 , 0X03]
00f4c3: 63 03

[	DB 0X64 , 0X04]
00f4c5: 64 04

[	DB 0X63 , 0X06]
00f4c7: 63 06

[	DB 0X65 , 0X06]
00f4c9: 65 06

[	DB 0X11 , 0X05]
00f4cb: 11 05

[	DB 0X56 , 0X03]
00f4cd: 56 03

[	DB 0X66 , 0X06]
00f4cf: 66 06

[	DB 0X77 , 0X07]
00f4d1: 77 07

[VDP_MSX1_PALETTE_REGS_END ::]
	global label address: 0x00f4d3

[ICON_PATTERN ::]
	global label address: 0x00f4d3

[	DB 0X00 , 0XFF , 0XE1 , 0XDF , 0XE3 , 0XF3 , 0XC2 , 0XC4]
00f4d3: 00 ff e1 df e3 f3 c2 c4

[	DB 0X00 , 0XF0 , 0X30 , 0XD0 , 0XD0 , 0X90 , 0X30 , 0X70]
00f4db: 00 f0 30 d0 d0 90 30 70

[	DB 0XFF , 0XF3 , 0X00 , 0X00 , 0X02 , 0X07 , 0X0F , 0X1F]
00f4e3: ff f3 00 00 02 07 0f 1f

[	DB 0X80 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X80 , 0XC0]
00f4eb: 80 00 00 00 00 00 80 c0

[	DB 0X49 , 0X49 , 0XFF , 0XF1 , 0XF9 , 0XF9 , 0XF9 , 0XB0]
00f4f3: 49 49 ff f1 f9 f9 f9 b0

[	DB 0X20 , 0X20 , 0XF0 , 0XF0 , 0XF0 , 0XF0 , 0XF0 , 0XF0]
00f4fb: 20 20 f0 f0 f0 f0 f0 f0

[	DB 0XFF , 0X49 , 0X49 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f503: ff 49 49 00 00 00 00 00

[	DB 0XF0 , 0X20 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f50b: f0 20 20 00 00 00 00 00

[	DB 0X49 , 0X49 , 0XFF , 0XF0 , 0XFE , 0XF8 , 0XF3 , 0XB0]
00f513: 49 49 ff f0 fe f8 f3 b0

[	DB 0X20 , 0X20 , 0XF0 , 0XF0 , 0X70 , 0XF0 , 0XF0 , 0X70]
00f51b: 20 20 f0 f0 70 f0 f0 70

[	DB 0XFF , 0X49 , 0X49 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f523: ff 49 49 00 00 00 00 00

[	DB 0XF0 , 0X20 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f52b: f0 20 20 00 00 00 00 00

[	DB 0X00 , 0XFF , 0XE1 , 0XDF , 0XE3 , 0XF3 , 0XC2 , 0XC4]
00f533: 00 ff e1 df e3 f3 c2 c4

[	DB 0X00 , 0XF0 , 0X30 , 0XD0 , 0XD0 , 0X90 , 0X30 , 0X70]
00f53b: 00 f0 30 d0 d0 90 30 70

[	DB 0XFF , 0XF3 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f543: ff f3 00 00 00 00 00 00

[	DB 0X80 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f54b: 80 00 00 00 00 00 00 00

[	DB 0X0F , 0X1D , 0X35 , 0X65 , 0X6D , 0X6F , 0X67 , 0X30]
00f553: 0f 1d 35 65 6d 6f 67 30

[	DB 0X80 , 0XC0 , 0X60 , 0X30 , 0XB0 , 0XB0 , 0X30 , 0X60]
00f55b: 80 c0 60 30 b0 b0 30 60

[	DB 0X1F , 0X0F , 0X00 , 0X00 , 0X02 , 0X07 , 0X0F , 0X1F]
00f563: 1f 0f 00 00 02 07 0f 1f

[	DB 0XC0 , 0X80 , 0X00 , 0X00 , 0X00 , 0X00 , 0X80 , 0XC0]
00f56b: c0 80 00 00 00 00 80 c0

[	DB 0XFF , 0X49 , 0X49 , 0X00 , 0X00 , 0X0A , 0X05 , 0X0A]
00f573: ff 49 49 00 00 0a 05 0a

[	DB 0XF0 , 0X20 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f57b: f0 20 20 00 00 00 00 00

[	DB 0XFF , 0X49 , 0X49 , 0X00 , 0X00 , 0X05 , 0X0A , 0X05]
00f583: ff 49 49 00 00 05 0a 05

[	DB 0XF0 , 0X20 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f58b: f0 20 20 00 00 00 00 00

[	DB 0XFF , 0X49 , 0X49 , 0X00 , 0X00 , 0X0A , 0X05 , 0X0A]
00f593: ff 49 49 00 00 0a 05 0a

[	DB 0XF0 , 0X20 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f59b: f0 20 20 00 00 00 00 00

[	DB 0XFF , 0X49 , 0X49 , 0X00 , 0X00 , 0X05 , 0X0A , 0X05]
00f5a3: ff 49 49 00 00 05 0a 05

[	DB 0XF0 , 0X20 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f5ab: f0 20 20 00 00 00 00 00

[	DB 0XFF , 0XF3 , 0X00 , 0X00 , 0X02 , 0X08 , 0X01 , 0X04]
00f5b3: ff f3 00 00 02 08 01 04

[	DB 0X80 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f5bb: 80 00 00 00 00 00 00 00

[	DB 0XFF , 0XF3 , 0X00 , 0X00 , 0X04 , 0X01 , 0X08 , 0X02]
00f5c3: ff f3 00 00 04 01 08 02

[	DB 0X80 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f5cb: 80 00 00 00 00 00 00 00

[ICON_PATTERN_END ::]
	global label address: 0x00f5d3

[VDP_MSX2_PALETTE_REGS ::]
	global label address: 0x00f5d3

[	DB 0X11 , 0X06]
00f5d3: 11 06

[	DB 0X33 , 0X07]
00f5d5: 33 07

[	DB 0X17 , 0X01]
00f5d7: 17 01

[	DB 0X27 , 0X03]
00f5d9: 27 03

[	DB 0X51 , 0X01]
00f5db: 51 01

[	DB 0X27 , 0X06]
00f5dd: 27 06

[	DB 0X71 , 0X01]
00f5df: 71 01

[	DB 0X73 , 0X03]
00f5e1: 73 03

[	DB 0X61 , 0X06]
00f5e3: 61 06

[	DB 0X64 , 0X06]
00f5e5: 64 06

[	DB 0X11 , 0X04]
00f5e7: 11 04

[	DB 0X65 , 0X02]
00f5e9: 65 02

[	DB 0X55 , 0X05]
00f5eb: 55 05

[VDP_MSX2_PALETTE_REGS_END ::]
	global label address: 0x00f5ed

[	SCOPE VDP_PUT_ICON]
	Scope path: VDP_PUT_ICON:

[VDP_PUT_ICON ::]
	global label address: 0x00f5ed

[	LD HL , 0X1801 | 0X4000] Z80:11cyc, R800:3cyc
00f5ed: 21 01 58

[	CALL SUB_CODE] Z80:18cyc, R800:5cyc
00f5f0: cd f6 f5

[VDP_PUT_ANIMATION ::]
	global label address: 0x00f5f3

[	LD HL , 0X1821 | 0X4000] Z80:11cyc, R800:3cyc
00f5f3: 21 21 58

[SUB_CODE :]
	label address: 0x00f5f6

[	LD C , VDP_PORT1] Z80:8cyc, R800:2cyc
00f5f6: 0e 99

[	OUT [ C ] , L] Z80:14cyc, R800:10 or 9cyc
00f5f8: ed 69

[	OUT [ C ] , H] Z80:14cyc, R800:10 or 9cyc
00f5fa: ed 61

[	OUT [ VDP_PORT0 ] , A] Z80:12cyc, R800:10 or 9cyc
00f5fc: d3 98

[	INC A] Z80:5cyc, R800:1cyc
00f5fe: 3c

[	OUT [ VDP_PORT0 ] , A] Z80:12cyc, R800:10 or 9cyc
00f5ff: d3 98

[	INC A] Z80:5cyc, R800:1cyc
00f601: 3c

[	RET] Z80:11cyc, R800:5cyc
00f602: c9

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//../subroutine/ocm_iplrom_vdp_standard_icon_dual_epbios.asm"] end

[END_OF_CODE :]
	label address: 0x00f603

[IF ( END_OF_CODE - BEGIN_OF_CODE ) > 2048]

[ELSE]

MESSAGE: Size is not a problem. (1539byte): ../iplrom_512k_rev300.asm(174)
[ENDIF]
	Selected {ELSE} block.


<< label >>
AB_CHECK 62129 ( 0xf2b1 )
ANIMATION_ID 62989 ( 0xf60d )
ATTR_ARCHIVE 32 ( 0x20 )
ATTR_DIRECTORY 16 ( 0x10 )
ATTR_HIDDEN 2 ( 0x2 )
ATTR_LONG_FILE_NAME 15 ( 0xf )
ATTR_READ_ONLY 1 ( 0x1 )
ATTR_SYSTEM 4 ( 0x4 )
ATTR_VOLUME_ID 8 ( 0x8 )
BANK_ID 62987 ( 0xf60b )
BEGIN_OF_CODE 61440 ( 0xf000 )
BIOS_UPDATING 62988 ( 0xf60c )
BOOT_UP_BIOS 62041 ( 0xf259 )
BUFFER 49152 ( 0xc000 )
CARD_TYPE 65487 ( 0xffcf )
CBIOS_CHECK 62142 ( 0xf2be )
CBIOS_CHECK:WAIT_A_MOMENT 62163 ( 0xf2d3 )
CHECK_ALREADY_LOADED 61528 ( 0xf058 )
DATA_AREA 62984 ( 0xf608 )
DIR_ATTRIBUTE 11 ( 0xb )
DIR_CRT_DATE 16 ( 0x10 )
DIR_CRT_TIME 14 ( 0xe )
DIR_CRT_TIME_TENTH 13 ( 0xd )
DIR_ENTRY_SIZE 32 ( 0x20 )
DIR_FILE_SIZE 28 ( 0x1c )
DIR_FST_CLUS_HI 20 ( 0x14 )
DIR_FST_CLUS_LO 26 ( 0x1a )
DIR_LST_ACC_DATE 18 ( 0x12 )
DIR_NAME 0 ( 0x0 )
DIR_NEXT_ENTRY 32 ( 0x20 )
DIR_NT_RES 12 ( 0xc )
DIR_WRT_DATE 24 ( 0x18 )
DIR_WRT_TIME 22 ( 0x16 )
DOS_ROM1_BANK 128 ( 0x80 )
DOS_ROM2_BANK 130 ( 0x82 )
DOS_ROM3_BANK 132 ( 0x84 )
DOS_ROM4_BANK 134 ( 0x86 )
DOS_ROM5_BANK 136 ( 0x88 )
DOS_ROM6_BANK 138 ( 0x8a )
DOS_ROM7_BANK 140 ( 0x8c )
DOS_ROM8_BANK 142 ( 0x8e )
DRAM_CODE_ADDRESS 61440 ( 0xf000 )
END_OF_CODE 62979 ( 0xf603 )
ENFORCE_SLOT0_PRIMARY_MODE 62014 ( 0xf23e )
EPBIOS_IMAGE_TABLE 61583 ( 0xf08f )
EPCS_ANI_ENABLER 1 ( 0x1 )
EPCS_BIOS1_START_ADDRESS 2048 ( 0x800 )
EPCS_BIOS2_START_ADDRESS 3072 ( 0xc00 )
EPCS_ERASE_BULK 199 ( 0xc7 )
EPCS_ERASE_SECTOR 216 ( 0xd8 )
EPCS_FAST_READ 11 ( 0xb )
EPCS_READ_BYTES 3 ( 0x3 )
EPCS_READ_DEVICE_ID 159 ( 0x9f )
EPCS_READ_SILICON_ID 171 ( 0xab )
EPCS_READ_STATUS 5 ( 0x5 )
EPCS_WRITE_BYTES 2 ( 0x2 )
EPCS_WRITE_DISABLE 4 ( 0x4 )
EPCS_WRITE_ENABLE 6 ( 0x6 )
EPCS_WRITE_STATUS 1 ( 0x1 )
ESERAM8K_BANK0 24576 ( 0x6000 )
ESERAM8K_BANK1 26624 ( 0x6800 )
ESERAM8K_BANK2 28672 ( 0x7000 )
ESERAM8K_BANK3 30720 ( 0x7800 )
EXP_IO_1CHIPMSX_ID 212 ( 0xd4 )
EXP_IO_VENDOR_ID_PORT 64 ( 0x40 )
FAT_BUFFER 49664 ( 0xc200 )
FILL_BANK 62197 ( 0xf2f5 )
FILL_FF_OR_C9 62171 ( 0xf2db )
FILL_FF_OR_C9:FILL_FF 62182 ( 0xf2e6 )
FORCE_BIOS_LOAD_FROM_EPBIOS 61559 ( 0xf077 )
FORCE_BIOS_LOAD_FROM_SDCARD 61556 ( 0xf074 )
FOUND_BIOS_NAME 61833 ( 0xf189 )
FOUND_BIOS_NAME:LOOP 61858 ( 0xf1a2 )
GET_MSX_VERSION 62188 ( 0xf2ec )
ICON_EPCS1 5 ( 0x5 )
ICON_EPCS1_ANI 21 ( 0x15 )
ICON_EPCS2 9 ( 0x9 )
ICON_EPCS2_ANI 25 ( 0x19 )
ICON_ERROR 1 ( 0x1 )
ICON_LOOP 17 ( 0x11 )
ICON_PATTERN 62675 ( 0xf4d3 )
ICON_PATTERN_END 62931 ( 0xf5d3 )
ICON_SD_ANI 29 ( 0x1d )
ICON_SD_CARD 13 ( 0xd )
INIT_STACK 61471 ( 0xf01f )
INIT_SWITCH_IO 61521 ( 0xf051 )
INIT_VDP 61471 ( 0xf01f )
INIT_VDP:LOOP1 61488 ( 0xf030 )
INIT_VDP:LOOP2 61499 ( 0xf03b )
JIS1_KANJI1_BANK 160 ( 0xa0 )
JIS1_KANJI2_BANK 162 ( 0xa2 )
JIS1_KANJI3_BANK 164 ( 0xa4 )
JIS1_KANJI4_BANK 166 ( 0xa6 )
JIS1_KANJI5_BANK 168 ( 0xa8 )
JIS1_KANJI6_BANK 170 ( 0xaa )
JIS1_KANJI7_BANK 172 ( 0xac )
JIS1_KANJI8_BANK 174 ( 0xae )
JIS2_KANJI1_BANK 176 ( 0xb0 )
JIS2_KANJI2_BANK 178 ( 0xb2 )
JIS2_KANJI3_BANK 180 ( 0xb4 )
JIS2_KANJI4_BANK 182 ( 0xb6 )
JIS2_KANJI5_BANK 184 ( 0xb8 )
JIS2_KANJI6_BANK 186 ( 0xba )
JIS2_KANJI7_BANK 188 ( 0xbc )
JIS2_KANJI8_BANK 190 ( 0xbe )
LOAD_BIOS 61953 ( 0xf201 )
LOAD_BIOS:BANK_INIT 62063 ( 0xf26f )
LOAD_BIOS:ENFORCE_EXTRA_MAPPER 62033 ( 0xf251 )
LOAD_BIOS:EXIT_LOAD_BIOS 61990 ( 0xf226 )
LOAD_BIOS:FILL_ZERO 61976 ( 0xf218 )
LOAD_BIOS:FILL_ZERO_LOOP 61982 ( 0xf21e )
LOAD_BIOS:S1 62010 ( 0xf23a )
LOAD_BIOS:SET_MSX2_PALETTE 62047 ( 0xf25f )
LOAD_BIOS_IMAGES 62087 ( 0xf287 )
LOAD_BIOS_IMAGES:LOOP 62087 ( 0xf287 )
LOAD_BIOS_IMAGES:MAKE_CBIOS_CHECK 62124 ( 0xf2ac )
LOAD_BIOS_IMAGES:SKIP_AB_CHECK 62117 ( 0xf2a5 )
LOAD_BLOCK_LOOP 61963 ( 0xf20b )
LOAD_EPBIOS_START 61944 ( 0xf1f8 )
LOAD_FROM_EPCS 61879 ( 0xf1b7 )
LOAD_FROM_EPCS:DUMMY_READ 61896 ( 0xf1c8 )
LOAD_FROM_SDCARD 61623 ( 0xf0b7 )
LOAD_FROM_SDCARD:ADD_FAT_SIZE 61699 ( 0xf103 )
LOAD_FROM_SDCARD:FOUND_PARTITION 61675 ( 0xf0eb )
LOAD_FROM_SDCARD:SD_CARD_IS_FAT 61683 ( 0xf0f3 )
LOAD_FROM_SDCARD:SD_FIRST_PROCESS 61641 ( 0xf0c9 )
LOAD_FROM_SDCARD:TEST_PARTITION_LOOP 61658 ( 0xf0da )
LOAD_SDBIOS 61874 ( 0xf1b2 )
MAIN_ROM1_BANK 144 ( 0x90 )
MAIN_ROM2_BANK 146 ( 0x92 )
MBR_1ST_PARTITION 446 ( 0x1be )
MBR_2ND_PARTITION 462 ( 0x1ce )
MBR_3RD_PARTITION 478 ( 0x1de )
MBR_4TH_PARTITION 494 ( 0x1ee )
MBR_BOOT_SIGNATURE 510 ( 0x1fe )
MBR_BOOT_STRAP_LOADER 0 ( 0x0 )
MBR_PARTITION_BOOT_FLAG 0 ( 0x0 )
MBR_PARTITION_CHS_BEGIN_SECTOR 1 ( 0x1 )
MBR_PARTITION_CHS_END_SECTOR 5 ( 0x5 )
MBR_PARTITION_LBA_BEGIN_SECTOR 8 ( 0x8 )
MBR_PARTITION_TOTAL_SECTORS 12 ( 0xc )
MBR_PARTITION_TYPE 4 ( 0x4 )
MEGASD_LAST_DATA_REGISTER 23552 ( 0x5c00 )
MEGASD_MODE_REGISTER 22528 ( 0x5800 )
MEGASD_SD_REGISTER 16384 ( 0x4000 )
MEGASD_STATUS_REGISTER 22528 ( 0x5800 )
MSX_KANJI1_BANK 154 ( 0x9a )
MSX_KANJI2_BANK 156 ( 0x9c )
MSX_MUSIC_BANK 150 ( 0x96 )
NOT_POWER_ON_RESET 61455 ( 0xf00f )
NO_EPCS_ICON 0 ( 0x0 )
NO_MATCH_EXIT 61840 ( 0xf190 )
NO_SD_ICON 0 ( 0x0 )
OPT_ROM_BANK 158 ( 0x9e )
PBR_BIOS_PARAMETER_BLOCK 11 ( 0xb )
PBR_BOOTSTRAP_CODE 62 ( 0x3e )
PBR_BYTES_PER_SECTOR 11 ( 0xb )
PBR_EXTEND_BIOS_PARAMETER_BLOCK 28 ( 0x1c )
PBR_JUMP_INSTRUCTION 0 ( 0x0 )
PBR_MEDIA_TYPE 21 ( 0x15 )
PBR_NUMBER_OF_HEADS 26 ( 0x1a )
PBR_NUM_OF_FAT 16 ( 0x10 )
PBR_OEM_NAME 3 ( 0x3 )
PBR_RESERVED_SECTORS 14 ( 0xe )
PBR_ROOT_ENTRIES 17 ( 0x11 )
PBR_SECTORS_PER_CLUSTER 13 ( 0xd )
PBR_SECTORS_PER_FAT 22 ( 0x16 )
PBR_SECTORS_PER_TRACK 24 ( 0x18 )
PBR_SIGNATURE 510 ( 0x1fe )
PBR_SMALL_SECTOR 19 ( 0x13 )
PRIMARY_SLOT_REGISTER 168 ( 0xa8 )
READ_SECTOR_CBR 62098 ( 0xf292 )
READ_SECTOR_FROM_EPCS 61585 ( 0xf091 )
READ_SECTOR_FROM_EPCS:READ_ALL 61606 ( 0xf0a6 )
RECEIVE_RESPONSE 62285 ( 0xf34d )
REMAIN_FAT_SECTORS 62979 ( 0xf603 )
ROOT_ENTRIES 62981 ( 0xf605 )
SDACMD_APP_SEND_OP_COND 41 ( 0x29 )
SDACMD_SET_WR_BLOCK_ERASE_COUNT 23 ( 0x17 )
SDBIOS_IMAGE_TABLE 61583 ( 0xf08f )
SDCMD_APP_CMD 55 ( 0x37 )
SDCMD_CLR_WRITE_PROT 29 ( 0x1d )
SDCMD_CRC_ON_OFF 39 ( 0x27 )
SDCMD_ERASE 38 ( 0x26 )
SDCMD_GO_IDLE_STATE 0 ( 0x0 )
SDCMD_LOCK_UNLOCK 42 ( 0x2a )
SDCMD_PROGRAM_CSD 27 ( 0x1b )
SDCMD_READ_OCR 58 ( 0x3a )
SDCMD_READ_SINGLE_BLK 17 ( 0x11 )
SDCMD_SEND_BKICKLEN 16 ( 0x10 )
SDCMD_SEND_CID 10 ( 0xa )
SDCMD_SEND_CSD 9 ( 0x9 )
SDCMD_SEND_IF_COND 8 ( 0x8 )
SDCMD_SEND_IO_COND 1 ( 0x1 )
SDCMD_SEND_STATUS 13 ( 0xd )
SDCMD_SEND_WRITE_PROT 30 ( 0x1e )
SDCMD_SET_WRITE_PROT 28 ( 0x1c )
SDCMD_TAG_ERASE_G_END 36 ( 0x24 )
SDCMD_TAG_ERASE_G_SEL 35 ( 0x23 )
SDCMD_TAG_SECT_END 33 ( 0x21 )
SDCMD_TAG_SECT_START 32 ( 0x20 )
SDCMD_UNTAG_ERASE_GRP 37 ( 0x25 )
SDCMD_UNTAG_SECTOR 34 ( 0x22 )
SDCMD_WRITE_BLOCK 24 ( 0x18 )
SD_ANI_ENABLER 1 ( 0x1 )
SD_INITIALIZE 62348 ( 0xf38c )
SD_INITIALIZE:CHECK_MMC 62536 ( 0xf448 )
SD_INITIALIZE:CHECK_SD1 62507 ( 0xf42b )
SD_INITIALIZE:DUMMY_READ1 62361 ( 0xf399 )
SD_INITIALIZE:DUMMY_READ2 62364 ( 0xf39c )
SD_INITIALIZE:ERROR_EXIT 62342 ( 0xf386 )
SD_INITIALIZE:GET_R1_WAIT 62384 ( 0xf3b0 )
SD_INITIALIZE:IS_BYTE_ACCESS 62502 ( 0xf426 )
SD_INITIALIZE:LOOP_ACMD41_V2 62446 ( 0xf3ee )
SD_INITIALIZE:READ_OCR 62483 ( 0xf413 )
SD_INITIALIZE:RETRY_ACMD41_V1 62507 ( 0xf42b )
SD_INITIALIZE:RETRY_ACMD41_V2 62443 ( 0xf3eb )
SD_INITIALIZE:RETRY_CMD1 62536 ( 0xf448 )
SD_INITIALIZE:SEND_CMD0 62301 ( 0xf35d )
SD_INITIALIZE:SKIP 62399 ( 0xf3bf )
SD_INITIALIZE:WAIT_CS 62303 ( 0xf35f )
SD_READ_SECTOR 62569 ( 0xf469 )
SD_READ_SECTOR:READ_WAIT 62596 ( 0xf484 )
SD_READ_SECTOR:RETRY_INIT 62560 ( 0xf460 )
SD_READ_SECTOR:SKIP 62622 ( 0xf49e )
SD_READ_SECTOR:TIMEOUT 62556 ( 0xf45c )
SEARCH_ACTIVE_PARTITION_ON_MBR 61653 ( 0xf0d5 )
SEARCH_BIOS_NAME 61706 ( 0xf10a )
SEARCH_BIOS_NAME:BIOS_NAME 61822 ( 0xf17e )
SEARCH_BIOS_NAME:CHAR_FOUND 61777 ( 0xf151 )
SEARCH_BIOS_NAME:ENTRIES_TO_SECTORS 61718 ( 0xf116 )
SEARCH_BIOS_NAME:GET_NEXT_SECTOR 61738 ( 0xf12a )
SEARCH_BIOS_NAME:NO_MATCH 61789 ( 0xf15d )
SEARCH_BIOS_NAME:NUMCMP 61767 ( 0xf147 )
SEARCH_BIOS_NAME:SEARCH_LOOP 61758 ( 0xf13e )
SEARCH_BIOS_NAME:SKIP_INC 61729 ( 0xf121 )
SEARCH_BIOS_NAME:STRCMP 61781 ( 0xf155 )
SELF_COPY 61455 ( 0xf00f )
SEND_COMMAND 62274 ( 0xf342 )
SET_BANK 62216 ( 0xf308 )
SET_F4_DEVICE 62000 ( 0xf230 )
SET_SD_COMMAND 62252 ( 0xf32c )
SET_SD_COMMAND:SET_SDHC 62259 ( 0xf333 )
SET_SD_COMMAND:SET_SD_MMC 62268 ( 0xf33c )
SET_SD_COMMAND:SET_SRC95 62281 ( 0xf349 )
SET_SD_COMMAND:WAIT_COMMAND_ACCEPT 62286 ( 0xf34e )
STOP_WITH_ERROR 61564 ( 0xf07c )
SUB_ROM_BANK 152 ( 0x98 )
TYPE_MMC 1 ( 0x1 )
TYPE_SDHC 3 ( 0x3 )
TYPE_SDSC 2 ( 0x2 )
TYPE_UNKNOWN 0 ( 0x0 )
VDP_CONTROL_REGS 62625 ( 0xf4a1 )
VDP_CONTROL_REGS_END 62643 ( 0xf4b3 )
VDP_MSX1_PALETTE_REGS 62643 ( 0xf4b3 )
VDP_MSX1_PALETTE_REGS_END 62675 ( 0xf4d3 )
VDP_MSX2_PALETTE_REGS 62931 ( 0xf5d3 )
VDP_MSX2_PALETTE_REGS_END 62957 ( 0xf5ed )
VDP_PORT0 152 ( 0x98 )
VDP_PORT1 153 ( 0x99 )
VDP_PORT2 154 ( 0x9a )
VDP_PORT3 155 ( 0x9b )
VDP_PUT_ANIMATION 62963 ( 0xf5f3 )
VDP_PUT_ICON 62957 ( 0xf5ed )
VDP_PUT_ICON:SUB_CODE 62966 ( 0xf5f6 )
WAIT_BUSY 62294 ( 0xf356 )
XBASIC2_BANK 148 ( 0x94 )
